    Базу можно представить себе в виде слаборастущего сильноветвящегося дерева.
    Физически же она устроена как набор страниц и предшествующему им заголовка. 
    Каждая страница - узел данного дерева,
    узел может быть как листовым, так и промежуточным.
    Промежуточный узел содержит информацию о том в какое поддерево надо направиться,
    Листовой узел содержит уже сами данные.
    
    Корневой узел находится по смещению, указанному в заголовке. Все страницы одного
    размера, размер страницы также указан в заголовке.
    
    Все записи в узле отсортированы по возрастанию и поиск на каждом уровне производится
    последовательно. Структура страницы следующая:
    - Cначала идёт идентификатор типа узла ('U' для промежуточного, 'L' для листового),
    Потом два байта - занятый объём страницы, далее (начиная с третьего байта )идут данные в формате
    
    "<1 байт - длина индексной части><1 байт - длина информационной части>
    <индексная часть><информационная часть>"
    
    Note: соответственно если нужен полный пробег по всей базе, то надо последовательно 
    пробежаться по всем листовым вершинам дерева.
    
    Note2: существует некоторое исключение в определении местоположения/содержимого записи записи
    Если это промежуточная страница и запись последняя (то есть смещение для начала записи за началом,
    свободной области, то содержимое забирается сразу за свободной областью.
    "всегда остаётся некий хвост записей, которые больше, чем самая последняя запись на странице. Их уже не с чем
    сравнивать - они просто больше, и всё. Для них и предусмотрена последняя двухбайтовая отсылка"
    
    Note3: 
    На самых нижних уровнях для совместимости в конце страницы также
    резервируются два байта, которые не используются. Точнее, они заполняются
    ссылками на следующий по порядку нижний уровень. То есть все нижние уровни
    базы можно просмотреть по порядку, не обращаясь к верхним уровням, просто
    считывая эти два байта после последней записи и преобразуя их в смещение в
    файле.

    Note4:
    К сожалению в некоторых базах, например stem, могут быть множественные вхождения ключей,
    для этого:
    Сначала find находит _первое_ вхождение элемента, а потом, при необходимости, можно
    "пробежаться" по странице до её окончания и найти все оставшиеся записи.
    Если добежали до конца страницы, то тогда пользуясь отсылкой идём до следующей страницы в 
    надежде что там дупы продолжатся.
    (find_dups это частный случай walk_if)

    Note5: поиск по промежуточным страницам идёт по строго больше, по нижней по больше или равно
